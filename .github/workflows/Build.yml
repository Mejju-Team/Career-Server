name: BUILD
on:
  push:
    branches:
      - main
    paths-ignore:
    - '.github/workflows/**' 
    - 'yaml/**'
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
          distribution: temurin
          
      # - name: Cache SonarQube packages
      #   uses: actions/cache@v1
      #   with:
      #     path: ~/.sonar/cache
      #     key: ${{ runner.os }}-sonar
      #     restore-keys: ${{ runner.os }}-sonar

          
      - name: Create application.properties
        run: |
          touch ./src/main/resources/application.properties
          echo '${{ secrets.PROPERTIES }}' >> ./src/main/resources/application.properties
          
      - name: gradle-wrapper properties
        run: |
          echo "distributionBase=GRADLE_USER_HOME" > ./gradle/wrapper/gradle-wrapper.properties
          echo "distributionPath=wrapper/dists" >> ./gradle/wrapper/gradle-wrapper.properties
          echo "distributionUrl=https\://services.gradle.org/distributions/gradle-7.6-all.zip" >> ./gradle/wrapper/gradle-wrapper.properties
          echo "zipStoreBase=GRADLE_USER_HOME" >> ./gradle/wrapper/gradle-wrapper.properties
          echo "zipStorePath=wrapper/dists" >> ./gradle/wrapper/gradle-wrapper.properties
          
     # IP 추출
      - name: Get Github Actions IP
        id: ip
        uses: haythem/public-ip@v1.2
        
     # AWS Credencials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_JM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_JM_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
          
      # RDS 보안그룹 생성
      - name: Add Github Actions IP to Security group
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 3306 --cidr ${{ steps.ip.outputs.ipv4 }}/32
          
      - name: Check Gradle Cache
        id: cache
        run: |
          RESULT=$(curl \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
            "${{ secrets.CACHE_PATH }}-1")
      
          if [[ $RESULT == *"created_at"* ]]
          then
            echo "new=2" >> $GITHUB_OUTPUT
            echo "old=1" >> $GITHUB_OUTPUT
          else
            echo "new=1" >> $GITHUB_OUTPUT
            echo "old=2" >> $GITHUB_OUTPUT
          fi
      
      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ steps.cache.outputs.new }}
          restore-keys: ${{ runner.os }}-gradle-

      - name: Build project
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed for operations that require GitHub authentication, if any
        run: ./gradlew build --info

      # - name: Build and analyze
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   run: ./gradlew build sonarqube --info
        
      - name: Delete Previous Gradle Cache
        run: |
          curl \
          -X DELETE \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.TOKEN }}" \
          "${{ secrets.CACHE_PATH }}-${{ steps.cache.outputs.old }}"
          
      # docker build
      - name: Extract last 5 characters of GITHUB_SHA
        run: |
          SHA_SHORT=${GITHUB_SHA: -5}
          echo "RELEASE_VERSION=$SHA_SHORT" >> $GITHUB_ENV
 
    # RDS 보안그룹 삭제
      - name: Remove Github Actions IP From Security Group
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_SG_ID }} --protocol tcp --port 3306 --cidr ${{ steps.ip.outputs.ipv4 }}/32
      
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1

      - name: docker build
        run: |
          ls 
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}:v${{ env.RELEASE_VERSION }} ./
          
      - name: aws configure
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_JM_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_JM_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_REGION }}
      
      - name: ecr
        run : aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.DOCKER_PASSWORD }}
            
      - name: docker push
        run: | 
          docker push ${{ secrets.DOCKERHUB_USERNAME }}:v${{ env.RELEASE_VERSION }}
          
      - name: Notify Discord on Success
        if: success()
        uses: Sniddl/discord-commits@v1.6
        with:
          message: "WAS - CI : GitHub Action 테스트 빌드가 성공했습니다. ${{ github.run_id }}"
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}
  
      - name: Notify Discord on Failure
        if: failure()
        uses: Sniddl/discord-commits@v1.6
        with:
          message: "WAS - CI : GitHub Action 테스트 빌드가 실패했습니다. ${{ github.run_id }}"
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}

          
