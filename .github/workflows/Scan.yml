name: SCAN 
# on:
  # push:
  #   branches:
  #     - main
    # paths-ignore:
    # - '.github/workflows/**' 
    # - 'yaml/**'
on:
  pull_request:
    branches:
      - main # or the name of your main branch
    types: [opened, synchronize, reopened]
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 17
        distribution: temurin

    - name: Create application.properties
      run: |
        touch ./src/main/resources/application.properties
        echo '${{ secrets.PROPERTIES }}' >> ./src/main/resources/application.properties      
        
    - name: gradle-wrapper properties
      run: |
        echo "distributionBase=GRADLE_USER_HOME" > ./gradle/wrapper/gradle-wrapper.properties
        echo "distributionPath=wrapper/dists" >> ./gradle/wrapper/gradle-wrapper.properties
        echo "distributionUrl=https\://services.gradle.org/distributions/gradle-7.6-all.zip" >> ./gradle/wrapper/gradle-wrapper.properties
        echo "zipStoreBase=GRADLE_USER_HOME" >> ./gradle/wrapper/gradle-wrapper.properties
        echo "zipStorePath=wrapper/dists" >> ./gradle/wrapper/gradle-wrapper.properties
    
    - name: Build with Gradle
      run: ./gradlew build -x test
        
    - name: Cache SonarQube packages
      uses: actions/cache@v1
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
        
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        args: >
          -Dsonar.projectKey=claire-eee_Career-Server
          -Dsonar.sources=src/main/java
          -Dsonar.java.binaries=build/classes/java/main    

    - name: SonarQube Quality Gate check
      id: sonarqube-quality-gate-check
      uses: sonarsource/sonarqube-quality-gate-action@master
      # Force to fail step after specific time.
      timeout-minutes: 5
      env:
       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

    # Optionally you can use the output from the Quality Gate in another step.
    # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
    - name: "Example show SonarQube Quality Gate Status value"
      if: success()
      uses: Sniddl/discord-commits@v1.6
      with:
         message: "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
         webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}    
     
    - name: Notify Discord on Failure
      if: failure() 
      uses: Sniddl/discord-commits@v1.6
      with:
          message: "SonarQube 분석에 실패했습니다. ${{ github.run_id }}"
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: Notify Discord on succeeded
      if: success()
      uses: Sniddl/discord-commits@v1.6
      with:
          message: "SonarQube 분석에 성공했습니다. ${{ github.run_id }}"
          webhook: ${{ secrets.DISCORD_WEBHOOK_URL }}    
